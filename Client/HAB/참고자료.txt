#include "pch.h"
#include "framework.h"
#include "GagebuMFCApp.h"
#include "GagebuMFCAppDlg.h"
#include "afxdialogex.h"
#include <winhttp.h>
#include <string>
#include "json.hpp"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

using json = nlohmann::json;

// HTTP 요청을 보내는 함수
std::wstring HttpRequest(const std::wstring& method, const std::wstring& endpoint, const std::wstring& jsonData = L"") {
    HINTERNET hSession = WinHttpOpen(L"GagebuMFCApp", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, NULL, NULL, 0);
    if (!hSession) return L"";

    HINTERNET hConnect = WinHttpConnect(hSession, L"localhost", 7299, 0);
    if (!hConnect) {
        WinHttpCloseHandle(hSession);
        return L"";
    }

    HINTERNET hRequest = WinHttpOpenRequest(hConnect, method.c_str(), endpoint.c_str(), NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, WINHTTP_FLAG_SECURE);
    if (!hRequest) {
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return L"";
    }

    BOOL result = TRUE;
    if (!jsonData.empty()) {
        result = WinHttpSendRequest(hRequest, L"Content-Type: application/json\r\n", 0, (LPVOID)jsonData.c_str(), jsonData.length() * sizeof(wchar_t), jsonData.length() * sizeof(wchar_t), 0);
    } else {
        result = WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, NULL, 0, 0, 0);
    }

    if (!result || !WinHttpReceiveResponse(hRequest, NULL)) {
        WinHttpCloseHandle(hRequest);
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return L"";
    }

    DWORD dwSize = 0;
    WinHttpQueryDataAvailable(hRequest, &dwSize);
    std::wstring response;
    if (dwSize > 0) {
        wchar_t* buffer = new wchar_t[dwSize / sizeof(wchar_t) + 1];
        ZeroMemory(buffer, dwSize + sizeof(wchar_t));
        DWORD dwDownloaded = 0;
        WinHttpReadData(hRequest, (LPVOID)buffer, dwSize, &dwDownloaded);
        response.assign(buffer);
        delete[] buffer;
    }

    WinHttpCloseHandle(hRequest);
    WinHttpCloseHandle(hConnect);
    WinHttpCloseHandle(hSession);
    return response;
}

void CGagebuMFCAppDlg::OnBnClickedButtonSend() {
    json transaction = {
        {"description", CT2A(m_txtDescription.GetString())},
        {"amount", _tstof(m_txtAmount.GetString())},
        {"date", CT2A(m_dtDate.Format("%Y-%m-%dT%H:%M:%S"))},
        {"category", CT2A(m_txtCategory.GetString())}
    };

    std::wstring jsonData = CA2T(transaction.dump().c_str());
    std::wstring response = HttpRequest(L"POST", L"/api/transactions", jsonData);
    MessageBox(response.c_str(), L"응답");
}

void CGagebuMFCAppDlg::OnBnClickedButtonFetch() {
    std::wstring response = HttpRequest(L"GET", L"/api/transactions");
    if (response.empty()) {
        MessageBox(L"API 요청 실패", L"오류");
        return;
    }

    json transactions = json::parse(CT2A(response.c_str()));
    m_listTransactions.ResetContent();
    
    for (const auto& t : transactions) {
        CString item;
        item.Format(L"%s | %s | %s | %.2f원",
            CA2T(t["date"].get<std::string>().c_str()),
            CA2T(t["category"].get<std::string>().c_str()),
            CA2T(t["description"].get<std::string>().c_str()),
            t["amount"].get<double>());
        m_listTransactions.AddString(item);
    }
}